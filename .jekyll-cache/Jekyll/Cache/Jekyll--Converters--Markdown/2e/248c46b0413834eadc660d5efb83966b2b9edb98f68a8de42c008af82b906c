I"0<h1 id="arcane">Arcane</h1>

<p>project discription</p>

<h2 id="procedural-generation-in-arcane">Procedural Generation in Arcane</h2>

<p>One goal with Arcane was to familiarize myself with procedural content generation. In this case, the goal was specifically to randomly generate terrain using noise algorithms and procedurally populate that terrain with environmental detail and enemies.</p>

<h3 id="mesh-generation">Mesh Generation</h3>

<p><img src="/media/MeshManipulation.gif" alt="Arcane" /></p>

<p>The first step to procedurally generating content in Arcane was creating the terrain. After researching some noise algorithms, I opted to use perlin noise, utilizing multiple layers of noise waves at decreasing amplitudes to make the terrain less predictable and more realistic. My initial approach was to manipulate the mesh in a plane object generated by Unity. I ended up scrapping this and generating the terrain mesh through code from scratch. This gave me to have much more control over the terrain. I was able to implement features such as control over the distance between vertices, which let me directly alter the definition of the landscape. I also filtered the noise values through another randomly selected function using Unityâ€™s Animation Cure feature. This resulted in different types of terrains in the levels such as rolling hills, mountains, or planes.</p>

<p><img src="/media/Generation.gif" alt="Arcane" /></p>

<h2 id="object-placement">Object Placement</h2>

<p>With the terrain mesh generation out of the way I moved on to populating the terrain with environmental detail. During my research I found Poisson disk sampling, an algorithm which resulted in randomly placed points within a certain distance from each other. I initially used this technique to place everything in my environment, from grass and trees to chests and enemies. At this point in the project I had more or less accomplished my original goals, but the environments I was generating didnâ€™t quite feel right. The terrain was varied, but the environments seemed to melt together and relying only on Poisson disk sampling for object placement made many of the levels feel static throughout the terrain. My original plan was to have all levels take place in a forest environment, which resulted in the same color scheme and assets being used in each level and only exacerbated this problem. I ultimately resolved these issues by incorporating perlin noise into the object placement and introducing different biomes in the game world. Using perlin noise to fluctuate the density of objects such as the grass or trees in the level resulted in a significantly more organic feel. As you can see above the game currently has four biomes each with their own unique of assets and color palettes. These features along with some randomized skyboxes resulted in procedurally generated environments that I was happy with. When working with procedurally generated content its important to remember that two completely different walls of noise have no meaningful differences if you canâ€™t make out any detail. In Arcaneâ€™s case I knew the terrain was sufficiently varied, but I needed to put in more effort to ensure the playerâ€™s perceived experience with each level was actually unique. Arcane still suffers from this problem to a degree and I believe a potential solution would be to decrease the gameâ€™s reliance on procedurally generated content and mix in authored content. This could be as simple as including pre-made buildings with designed enemy encounters in each level to break up the noise.</p>

<p><a href="./">back</a></p>
:ET